{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["detectWinner","array","target","reduce","m","e","count","initalState","board","Array","from","over","strategy","X","O","App","useState","state","setState","onPlay","index","oldState","winner","candidates","i","concat","length","Math","floor","random","playStrategy","makeTd","message","onClick","key","resetGame","map","row","htmlFor","name","onChange","event","value","DrawModal","props","className","LoseModal","WinModal","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.f58a2d14.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nconst indexsOf = (array, target) =>\n  array.reduce((m, e, i) => (e === target ? m.concat(i) : m), []);\n\nconst count = (array, target) =>\n  array.reduce((m, e) => (e === target ? m + 1 : m), 0);\n\nconst detectWinner = (array) => {\n  if (array[0] === array[1] && array[1] === array[2] && array[2] !== \"\")\n    return array[0];\n  if (array[3] === array[4] && array[4] === array[5] && array[5] !== \"\")\n    return array[3];\n  if (array[6] === array[7] && array[7] === array[8] && array[8] !== \"\")\n    return array[6];\n  if (array[0] === array[3] && array[3] === array[6] && array[6] !== \"\")\n    return array[0];\n  if (array[1] === array[4] && array[4] === array[7] && array[7] !== \"\")\n    return array[1];\n  if (array[2] === array[5] && array[5] === array[8] && array[8] !== \"\")\n    return array[2];\n  if (array[0] === array[4] && array[4] === array[8] && array[8] !== \"\")\n    return array[0];\n  if (array[6] === array[4] && array[4] === array[2] && array[2] !== \"\")\n    return array[6];\n\n  if (count(array, \"\") === 0) return \"Draw\";\n\n  return false;\n};\n\nconst playStrategy = (strategy, board) => {\n  const candidates = indexsOf(board, \"\");\n  const length = candidates.length;\n\n  if (strategy === \"random\") {\n    return candidates[Math.floor(Math.random() * length)];\n  } else if (strategy === \"first\") {\n    return candidates[0];\n  } else if (strategy === \"last\") {\n    return candidates[length - 1];\n  }\n};\n\nconst initalBoard = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\nconst initalState = {\n  board: Array.from(initalBoard),\n  over: false,\n  strategy: \"random\",\n};\nconst X = \"❌\";\nconst O = \"⭕️\";\n\nconst App = () => {\n  const [state, setState] = useState(initalState);\n\n  const onPlay = (index) => () => {\n    setState((oldState) => {\n      if (oldState.over) return oldState;\n      const board = Array.from(oldState.board);\n      board[index] = X;\n      const winner = detectWinner(board);\n      if (!winner) board[playStrategy(state.strategy, board)] = O;\n      return { ...oldState, board, over: winner };\n    });\n  };\n\n  const makeTd = (index) => {\n    const message = state.board[index];\n    if (message === \"\")\n      return (\n        <td onClick={onPlay(index)} index={index}>\n          &nbsp;\n        </td>\n      );\n    if (message === X) return <td key={index}>{X}</td>;\n    if (message === O) return <td key={index}>{O}</td>;\n  };\n\n  const updateStrategy = (event) => setState({ strategy: event.target.value });\n\n  const resetGame = () =>\n    setState((oldState) => ({ ...initalState, strategy: oldState.strategy }));\n\n  const winner = detectWinner(state.board);\n\n  return (\n    <>\n      {winner === X && <WinModal onClick={resetGame} />}\n      {winner === O && <LoseModal onClick={resetGame} />}\n      {winner === \"Draw\" && <DrawModal onClick={resetGame} />}\n      <h1>Tic • Tac • Toe</h1>\n      <table>\n        <tbody>\n          {[\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n          ].map((row) => (\n            <tr>{row.map(makeTd)}</tr>\n          ))}\n        </tbody>\n      </table>\n      <div>\n        <p>\n          <button onClick={resetGame}>Reset</button>\n        </p>\n        <p>\n          <label htmlFor=\"strategy\">Strategy</label>\n        </p>\n        <p>\n          <select name=\"strategy\" onChange={updateStrategy}>\n            <option value=\"random\">RANDOM</option>\n            <option value=\"first\">FIRST</option>\n            <option value=\"last\">LAST</option>\n          </select>\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n\nconst DrawModal = (props) => (\n  <div className=\"lose-modal\">\n    <h2>😭You Lost!😭</h2>\n    <button {...props}>Play Again</button>\n  </div>\n);\nconst LoseModal = (props) => (\n  <div className=\"lose-modal\">\n    <h2>😭You Lost!😭</h2>\n    <button {...props}>Play Again</button>\n  </div>\n);\n\nconst WinModal = (props) => (\n  <div className=\"win-modal\">\n    <h2>🏆You Won!🏆</h2>\n    <button {...props}>Play Again</button>\n  </div>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}