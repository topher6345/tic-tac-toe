{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["winner","board","reduce","m","e","INIT_BOARD","X","O","App","props","play","index","state","over","Array","from","indicies","setState","forEach","i","push","strategy","makeRow","row","map","message","onClick","key","updateStrategy","event","target","value","reset","this","Math","floor","random","length","for","name","onChange","Component","DrawModal","class","LoseModal","WinModal","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"0OAGMA,G,MAAS,SAACC,GACd,OAAIA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAmB,KAAbA,EAAM,GACnDA,EAAM,GACXA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAmB,KAAbA,EAAM,GACnDA,EAAM,GACXA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAmB,KAAbA,EAAM,GACnDA,EAAM,GACXA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAmB,KAAbA,EAAM,GACnDA,EAAM,GACXA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAmB,KAAbA,EAAM,GACnDA,EAAM,GACXA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAmB,KAAbA,EAAM,GACnDA,EAAM,GACXA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAmB,KAAbA,EAAM,GACnDA,EAAM,GACXA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAmB,KAAbA,EAAM,GACnDA,EAAM,GAGA,IADAA,EAAMC,QAAO,SAACC,EAAGC,GAAJ,MAAiB,KAANA,EAAWD,EAAI,EAAIA,IAAI,IACrC,SAKrBE,EAAa,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC9CC,EAAI,SACJC,EAAI,eA0FKC,E,kDAxFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAgBRC,KAAO,SAACC,GAAD,OAAW,WAChB,IAAI,EAAKC,MAAMC,KAAf,CAEA,IAAMZ,EAAQa,MAAMC,KAAK,EAAKH,MAAMX,OAC9Be,EAAW,GAGjB,GAFAf,EAAMU,GAASL,EAEXN,EAAOC,GAAQ,OAAO,EAAKgB,SAAS,CAAEhB,QAAOY,MAAM,IAEvDZ,EAAMiB,SAAQ,SAACd,EAAGe,GAAJ,MAAgB,KAANf,GAAYY,EAASI,KAAKD,MAClDlB,EAAM,EAAKoB,SAASL,IAAaT,EACjC,EAAKU,SAAS,CAAEhB,QAAOY,KAAMb,EAAOC,QA5BnB,EA+BnBqB,QAAU,SAACC,GAAD,OACRA,EAAIC,KAAI,SAACb,GACP,IAAMc,EAAU,EAAKb,MAAMX,MAAMU,GACjC,MAAgB,KAAZc,EAEA,wBAAIC,QAAS,EAAKhB,KAAKC,GAAQA,MAAOA,GAAtC,QAIAc,IAAYnB,EAAU,wBAAIqB,IAAKhB,GAAQL,GACvCmB,IAAYlB,EAAU,wBAAIoB,IAAKhB,GAAQJ,QAA3C,MAzCe,EA4CnBqB,eAAiB,SAACC,GAAD,OAAW,EAAKZ,SAAS,CAAEI,SAAUQ,EAAMC,OAAOC,SA5ChD,EA8CnBC,MAAQ,kBAAM,EAAKf,SAAS,CAAEhB,MAAOa,MAAMC,KAAKV,GAAaQ,MAAM,KA5CjE,EAAKD,MAAQ,CACXX,MAAOa,MAAMC,KAAKV,GAClBQ,MAAM,EACNQ,SAAU,SACVrB,QAAQ,GANO,E,qDAUVgB,GACP,MAA4B,WAAxBiB,KAAKrB,MAAMS,SACNL,EAASkB,KAAKC,MAAMD,KAAKE,SAAWpB,EAASqB,SAC1B,UAAxBJ,KAAKrB,MAAMS,SAA6BL,EAAS,GACzB,SAAxBiB,KAAKrB,MAAMS,SAA4BL,EAASA,EAASqB,OAAS,QAAtE,I,+BAkCQ,IAAD,OACP,OACE,oCACGrC,EAAOiC,KAAKrB,MAAMX,SAAWK,GAAK,kBAAC,EAAD,CAAUoB,QAASO,KAAKD,QAC1DhC,EAAOiC,KAAKrB,MAAMX,SAAWM,GAAK,kBAAC,EAAD,CAAWmB,QAASO,KAAKD,QAC9B,SAA7BhC,EAAOiC,KAAKrB,MAAMX,QACjB,kBAAC,EAAD,CAAWyB,QAASO,KAAKD,QAE3B,yDACA,+BACE,+BACG,CACC,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IACPR,KAAI,SAACD,GAAD,OACJ,4BAAK,EAAKD,QAAQC,SAIxB,6BACE,2BACE,4BAAQG,QAASO,KAAKD,OAAtB,UAEF,2BACE,2BAAOM,IAAI,YAAX,aAEF,2BACE,4BAAQC,KAAK,WAAWC,SAAUP,KAAKL,gBACrC,4BAAQG,MAAM,UAAd,UACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,QAAd,gB,GAhFIU,aA2FZC,EAAY,SAACjC,GAAD,OAChB,yBAAKkC,MAAM,cACT,iEACA,2BAAYlC,EAAZ,gBAGEmC,EAAY,SAACnC,GAAD,OAChB,yBAAKkC,MAAM,cACT,iEACA,2BAAYlC,EAAZ,gBAIEoC,EAAW,SAACpC,GAAD,OACf,yBAAKkC,MAAM,aACT,gEACA,2BAAYlC,EAAZ,gBC7HgBqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMtC,a","file":"static/js/main.4e0b08b8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nconst winner = (board) => {\n  if (board[0] === board[1] && board[1] === board[2] && board[2] !== \"\")\n    return board[0];\n  if (board[3] === board[4] && board[4] === board[5] && board[5] !== \"\")\n    return board[3];\n  if (board[6] === board[7] && board[7] === board[8] && board[8] !== \"\")\n    return board[6];\n  if (board[0] === board[3] && board[3] === board[6] && board[6] !== \"\")\n    return board[0];\n  if (board[1] === board[4] && board[4] === board[7] && board[7] !== \"\")\n    return board[1];\n  if (board[2] === board[5] && board[5] === board[8] && board[8] !== \"\")\n    return board[2];\n  if (board[0] === board[4] && board[4] === board[8] && board[8] !== \"\")\n    return board[0];\n  if (board[6] === board[4] && board[4] === board[2] && board[2] !== \"\")\n    return board[6];\n\n  const length = board.reduce((m, e) => (e === \"\" ? m + 1 : m), 0);\n  if (length === 0) return \"Draw\";\n\n  return false;\n};\n\nconst INIT_BOARD = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\nconst X = \"❌\";\nconst O = \"⭕️\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: Array.from(INIT_BOARD),\n      over: false,\n      strategy: \"random\",\n      winner: false,\n    };\n  }\n\n  strategy(indicies) {\n    if (this.state.strategy === \"random\")\n      return indicies[Math.floor(Math.random() * indicies.length)];\n    if (this.state.strategy === \"first\") return indicies[0];\n    if (this.state.strategy === \"last\") return indicies[indicies.length - 1];\n  }\n\n  play = (index) => () => {\n    if (this.state.over) return;\n\n    const board = Array.from(this.state.board);\n    const indicies = [];\n    board[index] = X;\n\n    if (winner(board)) return this.setState({ board, over: true });\n\n    board.forEach((e, i) => e === \"\" && indicies.push(i));\n    board[this.strategy(indicies)] = O;\n    this.setState({ board, over: winner(board) });\n  };\n\n  makeRow = (row) =>\n    row.map((index) => {\n      const message = this.state.board[index];\n      if (message === \"\")\n        return (\n          <td onClick={this.play(index)} index={index}>\n            &nbsp;\n          </td>\n        );\n      if (message === X) return <td key={index}>{X}</td>;\n      if (message === O) return <td key={index}>{O}</td>;\n    });\n\n  updateStrategy = (event) => this.setState({ strategy: event.target.value });\n\n  reset = () => this.setState({ board: Array.from(INIT_BOARD), over: false });\n\n  render() {\n    return (\n      <>\n        {winner(this.state.board) === X && <WinModal onClick={this.reset} />}\n        {winner(this.state.board) === O && <LoseModal onClick={this.reset} />}\n        {winner(this.state.board) === \"Draw\" && (\n          <DrawModal onClick={this.reset} />\n        )}\n        <h1>Tic • Tac • Toe</h1>\n        <table>\n          <tbody>\n            {[\n              [0, 1, 2],\n              [3, 4, 5],\n              [6, 7, 8],\n            ].map((row) => (\n              <tr>{this.makeRow(row)}</tr>\n            ))}\n          </tbody>\n        </table>\n        <div>\n          <p>\n            <button onClick={this.reset}>Reset</button>\n          </p>\n          <p>\n            <label for=\"strategy\">Strategy</label>\n          </p>\n          <p>\n            <select name=\"strategy\" onChange={this.updateStrategy}>\n              <option value=\"random\">RANDOM</option>\n              <option value=\"first\">FIRST</option>\n              <option value=\"last\">LAST</option>\n            </select>\n          </p>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n\nconst DrawModal = (props) => (\n  <div class=\"lose-modal\">\n    <h2>😭You Lost!😭</h2>\n    <button {...props}>Play Again</button>\n  </div>\n);\nconst LoseModal = (props) => (\n  <div class=\"lose-modal\">\n    <h2>😭You Lost!😭</h2>\n    <button {...props}>Play Again</button>\n  </div>\n);\n\nconst WinModal = (props) => (\n  <div class=\"win-modal\">\n    <h2>🏆You Won!🏆</h2>\n    <button {...props}>Play Again</button>\n  </div>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}