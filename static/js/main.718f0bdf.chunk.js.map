{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["selId","id","document","getElementById","localStorageSet","key","value","window","localStorage","setItem","JSON","stringify","onPlaySound","onLoseSound","onWinSound","onDrawSound","onNewGameSound","onHoverSound","X","O","Trophy","className","role","aria-label","CryingFace","FLASH","BOARD","count","array","target","reduce","m","e","detectWinner","findWinner","a","b","c","i","transposedBoard","transpose","playStrategy","strategy","board","candidates","concat","length","Math","floor","random","index","detect","player","empty","blockStrategy","initalBoard","winPercentage","history","previousValue","winner","toFixed","App","useState","Array","from","setBoard","gameOver","setOver","setStrategy","parse","getItem","setHistory","onPlay","play","newBoard","resetGame","arrayEql","newGame","oldHistory","gameHistory","timestamp","Date","now","toLocaleTimeString","makeSquare","message","onClick","onMouseEnter","map","row","htmlFor","name","onChange","confirm","reversed","HistoryList","DrawModal","this","props","React","Component","LoseModal","WinModal","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.718f0bdf.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nconst selId = (id) => document.getElementById(id);\n\nconst localStorageGet = (key) => JSON.parse(window.localStorage.getItem(key));\nconst localStorageSet = (key, value) =>\n  window.localStorage.setItem(key, JSON.stringify(value));\nconst onPlaySound = selId(\"onPlaySound\");\nconst onLoseSound = selId(\"onLoseSound\");\nconst onWinSound = selId(\"onWinSound\");\nconst onDrawSound = selId(\"onDrawSound\");\nconst onNewGameSound = selId(\"onNewGameSound\");\nconst onHoverSound = selId(\"onHoverSound\");\nconst X = \"❌\";\nconst O = \"⭕️\";\nconst Empty = \"\";\n\nconst Trophy = ({ className }) => (\n  <span {...{ className }} role=\"img\" aria-label=\"Trophy\">\n    🏆\n  </span>\n);\n\nconst CryingFace = ({ className }) => (\n  <span {...{ className }} role=\"img\" aria-label=\"Crying Face\">\n    😭\n  </span>\n);\n// used by history and view\nconst FLASH = {\n  [X]: (\n    <>\n      <Trophy className=\"spin-left\" />\n      You Won!\n      <Trophy className=\"spin-right\" />\n    </>\n  ),\n  [O]: (\n    <>\n      <CryingFace className=\"spin-left\" />\n      You Lost!\n      <CryingFace className=\"spin-right\" />\n    </>\n  ),\n  Draw: \"🤷‍♀️   Draw   🤷‍♀️\",\n};\n\nconst BOARD = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n];\n\nconst transpose = ([a, b, c]) => [\n  [a[0], b[0], c[0]],\n  [a[1], b[1], c[1]],\n  [a[2], b[2], c[2]],\n];\n\nconst indexsOf = (array, target) =>\n  array.reduce((m, e, i) => (e === target ? m.concat(i) : m), []);\n\nconst count = (array, target) =>\n  array.reduce((m, e) => (e === target ? m + 1 : m), 0);\n\nconst detectWinner = (array) => {\n  const findWinner = (a, b, c) =>\n    array[a] === array[b] && array[b] === array[c] && array[c] !== Empty;\n\n  for (let i = 0; i < 3; i++) {\n    if (findWinner(...BOARD[i])) return array[BOARD[i][0]];\n  }\n\n  const transposedBoard = transpose(BOARD);\n  for (let i = 0; i < 3; i++) {\n    if (findWinner(...transposedBoard[i])) return array[transposedBoard[i][0]];\n  }\n\n  if (findWinner(0, 4, 8)) return array[0];\n  if (findWinner(6, 4, 2)) return array[6];\n  if (count(array, \"\") === 0) return \"Draw\";\n\n  return false;\n};\n\n// [\n//   [0, 1, 2],\n//   [3, 4, 5],\n//   [6, 7, 8],\n// ]\n\nconst blockStrategy = (board) => {\n  if (count(board, X) === 1 && board[4] === Empty) return 4;\n\n  const detect = (player, a, b, empty) =>\n    board[a] === player && board[b] === board[a] && board[empty] === Empty;\n\n  if (detect(O, 3, 6, 0)) return 0;\n  if (detect(O, 4, 8, 0)) return 0;\n  if (detect(O, 1, 2, 0)) return 0;\n  if (detect(O, 0, 2, 1)) return 1;\n  if (detect(O, 4, 7, 1)) return 1;\n  if (detect(O, 0, 1, 2)) return 2;\n  if (detect(O, 6, 4, 2)) return 2;\n  if (detect(O, 5, 8, 2)) return 2;\n  if (detect(O, 0, 6, 3)) return 3;\n  if (detect(O, 4, 5, 3)) return 3;\n  if (detect(O, 0, 8, 4)) return 4;\n  if (detect(O, 1, 7, 4)) return 4;\n  if (detect(O, 6, 2, 4)) return 4;\n  if (detect(O, 3, 5, 4)) return 4;\n  if (detect(O, 2, 8, 5)) return 5;\n  if (detect(O, 3, 4, 5)) return 5;\n  if (detect(O, 0, 3, 6)) return 6;\n  if (detect(O, 4, 2, 6)) return 6;\n  if (detect(O, 7, 8, 6)) return 6;\n  if (detect(O, 1, 4, 7)) return 7;\n  if (detect(O, 6, 8, 7)) return 7;\n  if (detect(O, 0, 4, 8)) return 8;\n  if (detect(O, 2, 5, 8)) return 8;\n  if (detect(O, 6, 7, 8)) return 8;\n\n  if (detect(X, 3, 6, 0)) return 0;\n  if (detect(X, 4, 8, 0)) return 0;\n  if (detect(X, 1, 2, 0)) return 0;\n  if (detect(X, 0, 2, 1)) return 1;\n  if (detect(X, 4, 7, 1)) return 1;\n  if (detect(X, 0, 1, 2)) return 2;\n  if (detect(X, 6, 4, 2)) return 2;\n  if (detect(X, 5, 8, 2)) return 2;\n  if (detect(X, 0, 6, 3)) return 3;\n  if (detect(X, 4, 5, 3)) return 3;\n  if (detect(X, 0, 8, 4)) return 4;\n  if (detect(X, 1, 7, 4)) return 4;\n  if (detect(X, 6, 2, 4)) return 4;\n  if (detect(X, 3, 5, 4)) return 4;\n  if (detect(X, 2, 8, 5)) return 5;\n  if (detect(X, 3, 4, 5)) return 5;\n  if (detect(X, 0, 3, 6)) return 6;\n  if (detect(X, 4, 2, 6)) return 6;\n  if (detect(X, 7, 8, 6)) return 6;\n  if (detect(X, 1, 4, 7)) return 7;\n  if (detect(X, 6, 8, 7)) return 7;\n  if (detect(X, 0, 4, 8)) return 8;\n  if (detect(X, 2, 5, 8)) return 8;\n  if (detect(X, 6, 7, 8)) return 8;\n\n  return false;\n};\n\nconst playStrategy = (strategy, board) => {\n  const candidates = indexsOf(board, Empty);\n  const length = candidates.length;\n\n  if (strategy === \"random\") {\n    return candidates[Math.floor(Math.random() * length)];\n  } else if (strategy === \"first\") {\n    return candidates[0];\n  } else if (strategy === \"last\") {\n    return candidates[length - 1];\n  } else if (strategy === \"hard\") {\n    const index = blockStrategy(board);\n    return index === false\n      ? candidates[Math.floor(Math.random() * length)]\n      : index;\n  }\n};\n\nconst initalBoard = [\n  Empty,\n  Empty,\n  Empty,\n  Empty,\n  Empty,\n  Empty,\n  Empty,\n  Empty,\n  Empty,\n];\n\nconst arrayEql = (a, b) => {\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n};\n\nconst winPercentage = (history) =>\n  (\n    (history.reduce(\n      (previousValue, { winner }) =>\n        winner === X ? previousValue + 1 : previousValue,\n      0\n    ) /\n      history.length) *\n    100\n  ).toFixed(0);\n\nconst App = () => {\n  const [board, setBoard] = useState(Array.from(initalBoard));\n  const [gameOver, setOver] = useState(false);\n  const [strategy, setStrategy] = useState(\"hard\");\n  const [history, setHistory] = useState(localStorageGet(\"history\") || []);\n  const winner = detectWinner(board);\n\n  const onPlay = (index) => () => {\n    if (gameOver) return;\n    onPlaySound.play();\n    const newBoard = Array.from(board);\n    newBoard[index] = X;\n    const winner = detectWinner(newBoard);\n\n    setOver(winner);\n    if (!winner) newBoard[playStrategy(strategy, newBoard)] = O;\n    setBoard(newBoard);\n  };\n\n  const updateStrategy = (e) => setStrategy(e.target.value);\n\n  const resetGame = () => {\n    const newBoard = Array.from(initalBoard);\n    if (!arrayEql(board, newBoard)) onNewGameSound.play();\n    setStrategy(strategy);\n    setBoard(newBoard);\n    setOver(false);\n  };\n\n  const newGame = () => {\n    onNewGameSound.play();\n    setHistory((oldHistory) => {\n      const gameHistory = [\n        {\n          winner,\n          strategy,\n          timestamp: new Date(Date.now()).toLocaleTimeString(),\n          winPercentage: winPercentage([{ winner }, ...oldHistory]),\n        },\n        ...oldHistory,\n      ];\n      localStorageSet(\"history\", gameHistory);\n      return gameHistory;\n    });\n    resetGame();\n  };\n\n  const makeSquare = (index) => {\n    const message = board[index];\n    if (message === X) return <td key={index}>{X}</td>;\n    if (message === O)\n      return (\n        <td className=\"fade-in\" key={index}>\n          {O}\n        </td>\n      );\n\n    return (\n      <td\n        onClick={onPlay(index)}\n        onMouseEnter={() => onHoverSound.play()}\n        key={index}\n      >\n        {\" \"}\n        &nbsp;{\" \"}\n      </td>\n    );\n  };\n\n  const clearHistory = () => {\n    if (\n      history.length > 0 &&\n      !window.confirm(\n        \"Are you sure? This will delete your game history permanently.\"\n      )\n    )\n      return;\n\n    setHistory([]);\n    localStorageSet(\"history\", []);\n  };\n\n  const squares = () =>\n    BOARD.map((row, index) => <tr key={index}>{row.map(makeSquare)}</tr>);\n\n  return (\n    <>\n      {winner === X && <WinModal onClick={newGame} />}\n      {winner === O && <LoseModal onClick={newGame} />}\n      {winner === \"Draw\" && <DrawModal onClick={newGame} />}\n      <div className=\"paneled\">\n        <h1>Tic • Tac • Toe</h1>\n      </div>\n      <table>\n        <tbody>{squares()}</tbody>\n      </table>\n      <div>\n        <p>\n          <button onMouseEnter={() => onHoverSound.play()} onClick={resetGame}>\n            New Game\n          </button>\n        </p>\n        <div className=\"paneled\">\n          <p>\n            <label htmlFor=\"strategy\">Difficulty</label>\n          </p>\n        </div>\n        <p>\n          <select name=\"strategy\" onChange={updateStrategy}>\n            <option value=\"hard\">HARD</option>\n            <option value=\"random\">MEDIUM</option>\n            <option value=\"first\">EASY #1</option>\n            <option value=\"last\">EASY #2</option>\n          </select>\n        </p>\n        <div className=\"paneled\">\n          <p>History</p>\n        </div>\n        <button onClick={clearHistory} className=\"clearButton\">\n          Clear\n        </button>\n        <div className=\"terminal\">\n          <ol reversed>\n            <HistoryList history={history} />\n          </ol>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n\nconst HistoryList = ({ history }) =>\n  history.map(({ winner, strategy, timestamp, winPercentage }, index) => (\n    <li key={index + winner}>\n      {timestamp} • {FLASH[winner]} • {strategy} • win percentage:{\" \"}\n      {winPercentage}%\n    </li>\n  ));\n\nclass DrawModal extends React.Component {\n  componentDidMount() {\n    onDrawSound.play();\n  }\n\n  render() {\n    return (\n      <div className=\"draw-modal\">\n        <h2>{FLASH[\"Draw\"]}</h2>\n        <button\n          {...{\n            onClick: this.props.onClick,\n          }}\n        >\n          Play Again\n        </button>\n      </div>\n    );\n  }\n}\nclass LoseModal extends React.Component {\n  componentDidMount() {\n    onLoseSound.play();\n  }\n\n  render() {\n    return (\n      <div className=\"lose-modal\">\n        <h2>{FLASH[O]}</h2>\n        <button\n          {...{\n            onClick: this.props.onClick,\n          }}\n        >\n          Play Again\n        </button>\n      </div>\n    );\n  }\n}\n\nclass WinModal extends React.Component {\n  componentDidMount() {\n    onWinSound.play();\n  }\n\n  render() {\n    return (\n      <div className=\"win-modal\">\n        <h2>{FLASH[X]}</h2>\n        <button\n          {...{\n            onClick: this.props.onClick,\n          }}\n        >\n          Play Again\n        </button>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}