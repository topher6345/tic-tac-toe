{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["X","O","BOARD","count","array","target","reduce","m","e","detectWinner","findWinner","a","b","c","i","transposedBoard","transpose","playStrategy","strategy","board","candidates","concat","length","Math","floor","random","index","detect","player","empty","blockStrategy","candidate","JSON","stringify","initalBoard","initalState","Array","from","over","App","useState","state","setState","onPlay","oldState","winner","makeTd","message","onClick","key","resetGame","map","row","htmlFor","name","onChange","value","updateStrategy","DrawModal","props","className","LoseModal","WinModal","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.8c840f4a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nconst X = \"❌\";\nconst O = \"⭕️\";\nconst Empty = \"\";\n\nconst BOARD = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n];\n\nconst transpose = ([a, b, c]) => [\n  [a[0], b[0], c[0]],\n  [a[1], b[1], c[1]],\n  [a[2], b[2], c[2]],\n];\n\nconst indexsOf = (array, target) =>\n  array.reduce((m, e, i) => (e === target ? m.concat(i) : m), []);\n\nconst count = (array, target) =>\n  array.reduce((m, e) => (e === target ? m + 1 : m), 0);\n\nconst detectWinner = (array) => {\n  const findWinner = (a, b, c) =>\n    array[a] === array[b] && array[b] === array[c] && array[c] !== Empty;\n\n  for (let i = 0; i < 3; i++) {\n    if (findWinner(...BOARD[i])) return array[BOARD[i][0]];\n  }\n\n  const transposedBoard = transpose(BOARD);\n  for (let i = 0; i < 3; i++) {\n    if (findWinner(...transposedBoard[i])) return array[transposedBoard[i][0]];\n  }\n\n  if (findWinner(0, 4, 8)) return array[0];\n  if (findWinner(6, 4, 2)) return array[6];\n  if (count(array, \"\") === 0) return \"Draw\";\n\n  return false;\n};\n\n// [\n//   [0, 1, 2],\n//   [3, 4, 5],\n//   [6, 7, 8],\n// ]\n\nconst blockStrategy = (board) => {\n  if (count(board, X) === 1 && board[4] === Empty) return 4;\n\n  // if X plays the center square as first move O should never play a corner\n  //   if (count(board, X) === 1 && board[4] === X)\n  //     return [1, 3, 5, 7][Math.floor(Math.random() * 4)];\n  \n  const detect = (player, a, b, empty) =>\n    board[a] === player && board[b] === board[a] && board[empty] === Empty;\n\n  if (detect(O, 3, 6, 0)) return 0;\n  if (detect(O, 4, 8, 0)) return 0;\n  if (detect(O, 1, 2, 0)) return 0;\n  if (detect(O, 0, 2, 1)) return 1;\n  if (detect(O, 4, 7, 1)) return 1;\n  if (detect(O, 0, 1, 2)) return 2;\n  if (detect(O, 6, 4, 2)) return 2;\n  if (detect(O, 5, 8, 2)) return 2;\n  if (detect(O, 0, 6, 3)) return 3;\n  if (detect(O, 4, 5, 3)) return 3;\n  if (detect(O, 0, 8, 4)) return 4;\n  if (detect(O, 1, 7, 4)) return 4;\n  if (detect(O, 6, 2, 4)) return 4;\n  if (detect(O, 3, 5, 4)) return 4;\n  if (detect(O, 2, 8, 5)) return 5;\n  if (detect(O, 3, 4, 5)) return 5;\n  if (detect(O, 0, 3, 6)) return 6;\n  if (detect(O, 4, 2, 6)) return 6;\n  if (detect(O, 7, 8, 6)) return 6;\n  if (detect(O, 1, 4, 7)) return 7;\n  if (detect(O, 6, 8, 7)) return 7;\n  if (detect(O, 0, 4, 8)) return 8;\n  if (detect(O, 2, 5, 8)) return 8;\n  if (detect(O, 6, 7, 8)) return 8;\n\n  if (detect(X, 3, 6, 0)) return 0;\n  if (detect(X, 4, 8, 0)) return 0;\n  if (detect(X, 1, 2, 0)) return 0;\n  if (detect(X, 0, 2, 1)) return 1;\n  if (detect(X, 4, 7, 1)) return 1;\n  if (detect(X, 0, 1, 2)) return 2;\n  if (detect(X, 6, 4, 2)) return 2;\n  if (detect(X, 5, 8, 2)) return 2;\n  if (detect(X, 0, 6, 3)) return 3;\n  if (detect(X, 4, 5, 3)) return 3;\n  if (detect(X, 0, 8, 4)) return 4;\n  if (detect(X, 1, 7, 4)) return 4;\n  if (detect(X, 6, 2, 4)) return 4;\n  if (detect(X, 3, 5, 4)) return 4;\n  if (detect(X, 2, 8, 5)) return 5;\n  if (detect(X, 3, 4, 5)) return 5;\n  if (detect(X, 0, 3, 6)) return 6;\n  if (detect(X, 4, 2, 6)) return 6;\n  if (detect(X, 7, 8, 6)) return 6;\n  if (detect(X, 1, 4, 7)) return 7;\n  if (detect(X, 6, 8, 7)) return 7;\n  if (detect(X, 0, 4, 8)) return 8;\n  if (detect(X, 2, 5, 8)) return 8;\n  if (detect(X, 6, 7, 8)) return 8;\n\n  return [];\n};\n\n// String -> Array -> Number\nconst playStrategy = (strategy, board) => {\n  const candidates = indexsOf(board, Empty);\n  const length = candidates.length;\n\n  if (strategy === \"random\") {\n    return candidates[Math.floor(Math.random() * length)];\n  } else if (strategy === \"first\") {\n    return candidates[0];\n  } else if (strategy === \"last\") {\n    return candidates[length - 1];\n  } else if (strategy === \"block\") {\n    const index = blockStrategy(board);\n    const candidate = candidates[Math.floor(Math.random() * length)];\n    if (JSON.stringify(index) === \"[]\") {\n      return candidate;\n    } else {\n      return index;\n    }\n  }\n};\n\nconst initalBoard = [\n  Empty,\n  Empty,\n  Empty,\n  Empty,\n  Empty,\n  Empty,\n  Empty,\n  Empty,\n  Empty,\n];\nconst initalState = {\n  board: Array.from(initalBoard),\n  over: false,\n  strategy: \"block\",\n};\n\nconst App = () => {\n  const [state, setState] = useState(initalState);\n\n  const onPlay = (index) => () => {\n    setState((oldState) => {\n      if (oldState.over) return oldState;\n      const board = Array.from(oldState.board);\n      board[index] = X;\n      const winner = detectWinner(board);\n      const strategy = playStrategy(state.strategy, board);\n      if (!winner) board[strategy] = O;\n      return { ...oldState, board, over: winner };\n    });\n  };\n\n  const makeTd = (index) => {\n    const message = state.board[index];\n    if (message === \"\")\n      return (\n        <td onClick={onPlay(index)} index={index}>\n          &nbsp;\n        </td>\n      );\n    if (message === X) return <td key={index}>{X}</td>;\n    if (message === O) return <td key={index}>{O}</td>;\n  };\n\n  const updateStrategy = ({ target }) => {\n    const { value: strategy } = target;\n    setState((oldState) => ({ ...oldState, strategy }));\n  };\n\n  const resetGame = () =>\n    setState((oldState) => ({ ...initalState, strategy: oldState.strategy }));\n\n  const winner = detectWinner(state.board);\n\n  return (\n    <>\n      {winner === X && <WinModal onClick={resetGame} />}\n      {winner === O && <LoseModal onClick={resetGame} />}\n      {winner === \"Draw\" && <DrawModal onClick={resetGame} />}\n      <h1>Tic • Tac • Toe</h1>\n      <table>\n        <tbody>\n          {BOARD.map((row) => (\n            <tr>{row.map(makeTd)}</tr>\n          ))}\n        </tbody>\n      </table>\n      <div>\n        <p>\n          <button onClick={resetGame}>Reset</button>\n        </p>\n        <p>\n          <label htmlFor=\"strategy\">Strategy</label>\n        </p>\n        <p>\n          <select name=\"strategy\" onChange={(e) => updateStrategy(e)}>\n            <option value=\"block\">Block</option>\n            <option value=\"random\">RANDOM</option>\n            <option value=\"first\">FIRST</option>\n            <option value=\"last\">LAST</option>\n          </select>\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n\nconst DrawModal = (props) => (\n  <div className=\"draw-modal\">\n    <h2>🤷‍♀️DRAW🤷‍♀️</h2>\n    <button {...props}>Play Again</button>\n  </div>\n);\nconst LoseModal = (props) => (\n  <div className=\"lose-modal\">\n    <h2>😭You Lost!😭</h2>\n    <button {...props}>Play Again</button>\n  </div>\n);\n\nconst WinModal = (props) => (\n  <div className=\"win-modal\">\n    <h2>🏆You Won!🏆</h2>\n    <button {...props}>Play Again</button>\n  </div>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}